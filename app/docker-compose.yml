version: "3.9"

services:
  # Serviço que irá rodar o frontend
  frontend:
    build: ./frontend
    container_name: app_frontend
    ports:
      - 3000:3000
    platform: linux/x86_64
    working_dir: /app-frontend
    volumes:
      - ./frontend:/app-frontend
    depends_on:
      - node
    # Serviço que irá rodar o node
  node:
    # Imagem base do container
    image: node:19.2.0
    # Nome do container para facilitar execução
    container_name: ps_app
    # Caminho da Dockerfile
    build: ./backend
    # Mesmo que `docker run -t`
    tty: true
    # Mesmo que `docker run -i`
    stdin_open: true
    # Restarta a imagem caso algo a faça parar
    # command: bash
    restart: always
    # Diretório padrão de execução
    working_dir: /home/app-backend
    # Lista de volumes (diretórios) mapeados de fora para dentro do container
    volumes:
      # Monta o diretório atual, com todos os dados do projeto, 
      # dentro do diretório /app
      - ./backend:/home/app-backend
    # Lista de serviços do qual este serviço depende
    depends_on:
      - mongodb
    # Lista de portas mapeadas de dentro para fora do container
    # na notação porta_de_fora:porta_de_dentro
    ports:
      # Expõe a porta padrão da aplicação: altere aqui caso use outra porta
      - 3001:3001
    environment:
      - MONGO_URI=mongodb://mongodb:27017/PSApp

  # Serviço que irá rodar o mongodb
  mongodb:
    image: mongo
    build: ./backend/db
    container_name: ps_db_container
    volumes:
      - ./backend/db:/docker-entrypoint-initdb.d
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=PSApp
    ports:
      - 27017:27017
# Lista de redes que os containeres irão utilizar
networks:
  # Rede padrão, criada automaticamente
  default:
    # Dá um nome específico à rede padrão
    name: ps_container_net

# As chaves `tty`, `stdin_open` e `command` fazem com que o container fique
# rodando em segundo plano, bem como tornam possível o uso do comando
# `docker attach`, já deixando o terminal atual acoplado ao container, direto
# no bash. Apesar disso, utilizar o attach mais de uma vez irá replicar o
# terminal, portanto é melhor utilizar o comando `docker exec`.

# A renomeação da rede padrão é feita pois caso contrário o nome da rede será
# o nome do diretório onde o arquivo atual se encontra, o que pode dificultar
# a listagem individual.
